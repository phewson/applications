
---
title: "In-Class Test Brief"
author: "Paul Hewson"
date: "2025-10-20"
format: 
  html:
    embed-resources: true
---

# In-Class Test Brief: Python, `doit`, and GitHub Actions

## Overview

This in-class test asks you to demonstrate a number of core competencies essential for successful completion of this module. You will complete a series of Python programming tasks and build a reproducible data pipeline using `doit`, culminating in a report compiled with `quarto`.

Your work will be assessed automatically using **GitHub Actions**, so it is essential that your repository is correctly set up **before** the test opens.

## What Youâ€™ll Demonstrate

By completing this test, you will show that you can:

- Set up and use a GitHub repository based on the template provided.
- Configure GitHub Actions to run unit tests and linters (PEP8 compliance).
- Write Python functions to solve basic programming challenges.
- Build a reproducible data pipeline using the `doit` package.
- Compile a simple report using `quarto`.

##  Preparation (Before the Test Opens)

You **must** have completed the following setup using the module instructions:

- Installed Python and Conda.
- Created a GitHub account and registered your student status so that you get features such as compute time for GitHub actions
- Cloned the GitHub template repository.
- Configured Rstudio to use this GitHub repository so that you can make changes locally and them push them to the repository.
- Configured GitHub Actions to run tests and linting.
- Verified that your local environment works using the `./run` script.
- Ensured you can find the zip file artefact created by GitHub actions (this will be recreated every time you commit code to your repository)

You should use computer tutorials and drop-in sessions to get help with this setup. **Once the test opens, no further setup support can be provided.**

##  Test Tasks

### 1. Python Programming Skills

You will be given a list of **ten functions** to complete. Each function will have a doc string describing the task. For example:

```python
def hello():
    """Write code that prints 'Hello World!'"""
    return 0
```

Your job is to replace the placeholder code with working Python that satisfies the description.


```python
def hello():
    print("Hello World!")
```

 These tasks will cover basic operations such as:

- List manipulation
- DataFrame operations
- String handling
- Simple numerical computations

Use the `./run` script to run unit tests locally. Initially, the tests will fail. Your objective is to make them pass.

### 2. Reproducible Pipeline with `doit`

You will complete a simple `doit` pipeline that includes:

- Reading and processing data
- Generating summary statistics or visualisations
- Compiling a pre-populated `quarto` report

The pipeline will be partially written for you. Your task is to complete the missing parts and ensure it runs end-to-end.

### 3. GitHub Actions Assessment

Your final submission will be assessed via **GitHub Actions**. This means:

- Your code must pass all unit tests.
- Your code must comply with PEP8 linting standards.
- Your pipeline must run successfully and produce the expected outputs.
- Under Actions, you will be given an artefact in the form of a zip file.  This zip file contains a print out of the results of running the unit tests and linter on your code as well as details of the action. It will also contain your source files.  You can also see that the file reports the ShaSum.  We will check that the shasum of the submitted file matches that on the corresponding action.

## Submission

- Your GitHub repository must be public (or shared with the instructor).
- All work must be committed and pushed before the deadline.
- The GitHub Actions workflow must complete successfully.  Remember this will take a few minutes
- You are to submit the zip file produced by GitHub actions to ELE before the test deadline. This is the only aspect of this work that allows grading to take place. Partial grading for previous steps will not be awarded. Only the submitted GitHub actions produced zip file can be graded.
